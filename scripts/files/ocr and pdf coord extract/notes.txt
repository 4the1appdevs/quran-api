Also refer Preprocessing.md

Note: All the scripts are in this same folder where this files exists

REmoving encryption from pdf.
qpdf --decrypt securet.pdf unsecureed.pdf


converting text based pdf to pdf

pdftotext input.pdf output.pdf


covert with layout intact
pdftotext -layout input.pdf otuptu.pdf


extract text by coordinates with staritng and ending pages:

pdftotext -layout -x <xcordinate> -y <ycordinate> -W <widthfromxy> -H<heightfromxy> -f <startingpage> -l <endingpage> inpuot output


convert pdf to tiff files(use adobe reader pro, it has better output quality, use save as)

pdftocairo -tiff inpuot output

with compressiosn:
pdftocairo -tiff -tiffcompression lzw inpuot output


mousecoords.py script:
THis script will print the mouse coordinates which can be used by opencv for cropping etc.
If the image shown is big then you might have to increase the descaling factor , to the iwhole image  cna be seen in monitor


readocr.js
This reads the preprocessed images and coverts into text using tesseract
Give language arguments accordingly, refeer tesseract repo for details 
https://github.com/tesseract-ocr/tesseract/blob/master/doc/tesseract.1.asc


Imagecropbylines.py:
Just have to assign the input directory containing images to be preprocess or cropped by using lines(PHoughlines) and assign the output direcotry
Just have to write the logic which lines to crop etc
It containss few def/functions that makes the take easier

Understanding Cropping image in opencv
https://stackoverflow.com/a/16823104/2437224
https://stackoverflow.com/a/58177717/2437224

Imagecropbylines2.py
2nd example of cropping images by houglines

mergefiles.js
takes files from one fodler and create  a consolidated singel one file


croptest.py
This might help you in visulizing the cropped image and the hough lines in the image which I might want to crop


Textextractbylines.py:
This script extracts the text from text based pdf using coordinates which were retrieved using opencv houghlines.
Have to assign pdffilename from where text need to be extract, tiff images direcotry for opencv to read and the coordinates, pdfwidth and pdfheight ,this data we can get from 
pdfinfo -box input.pdf (use mediabox values)



In opencv x1 y1 x2 y2 is used during cropping and in pdfinfo, x1, y1 and width and heigth is used
In other words opencv cropping uses x1 y1 x1+width y1+height and pdfinfo extraction uses x1 y1 width and height
The width and height which opencv uses is of differnetrt values :
imgheight, imgwidth = img.shape[:2]
and the width and height of pdf is of differnt valeus 
pdfinfo -box input.pdf 
So have to be carefull about it.

All the scripts uses opencv based coordinates values, and Textextractbylines.py converts those values at end to pdf values using the pdfwidht and pdfheight value assigned before callling pdftotext

getLines.py:
This can be used to get lines from image, this works from command line args and can be called from node, or any other programming langauge, I don't it use now, as I programmed completey in python as it was easy
# Takes minLineLength, maxLineGap, and PathToImage
# returns the lines in the given image

cropper.py:
This is similar script as above and works from cmd line args
# Takes x1,y1,x2,y2, pathtoImage,pathtoSave as arguments and crops and saves the given image
# pass None to x1 or y1 to start from 0 and pass null to x2 or y2 to crop till end


PHoughlines:
it returns x1 y1 x2 y2  i.e starting and ending point of the line, I can define the minLineLength i.e below this lenght lines won't be considered and maxlinegap i.e to consider the line on gaps in the line, these are important in case of poor quality scanned images where the lines have many gaps due to poor image quality
https://docs.opencv.org/master/dd/d1a/group__imgproc__feature.html#ga8618180a5948286384e3b7ca02f6feeb


Numpy:
numpy makes takes easier, should use it if possible and makes takes easier or use normal loops if it's easier


Mistakes
I have to check for mistakes manually, sometimes it crops more or less that required and that needs to be fixed by manually cropping using photoshop etc



Docs files:
If the files are in docs format, have to save as utf-8 encoded text file and then perform regex etc replace using notepad++, sometimes have to use atom to perform regex operations as notepad++ won't work fine sometimes for different langagues

Workflows:
Coverting text based pdf to text:
use pdftotext to save the file as text, if the structuer is good, I don't ahve to preprocess, just adding it to api will work fine.

If the pdf have footnotes, then have to fetch text using coordinates, First have save pdf as tiff and  to use opencv to get the coordinates uniquely for each differnert page/image using featuers such as seperating lines etc and then giving those cooridnates to pdftotext binary.


Coverting image based pdf to text:
covert the pdf to tiff image, 
then crop using opencv houghlines etc and save the cropped images, 
use tesseract to ocr the text from images, have to use --psm 6 flag so the layout is same and verse numbers don't get assigned here and there

Regular expression:
for normal text processing, mostly I do is replace all newline with space ie \r?\n with  space and arringging it line by line using numbers is by:
(\d+.*?) with \n$1
Also have to tinker with limit variable in apisicrpt.js validatecleantrans()